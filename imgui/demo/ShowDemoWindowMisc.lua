-- ShowDemoWindowMisc
-- created on 2021/9/26
-- author @zoloypzuo

local lines = { "aaa1.c", "bbb1.c", "ccc1.c", "aaa2.cpp", "bbb2.cpp", "ccc2.cpp", "abc.h", "hello, world" }

local function Filtering()
    -- TODO Filtering
    --    if (ImGui.CollapsingHeader("Filtering")) then
    --        -- Helper class to easy setup a text filter.
    --        -- You may want to implement a more feature-full filtering scheme in your own application.
    --        static ImGuiTextFilter filter;
    --        ImGui.Text("Filter usage:\n" ..
    --                    "  \"\"         display all lines\n" ..
    --                    "  \"xxx\"      display lines containing \"xxx\"\n" ..
    --                    "  \"xxx,yyy\"  display lines containing \"xxx\" or \"yyy\"\n" ..
    --                    "  \"-xxx\"     hide lines containing \"xxx\"");
    --        filter.Draw();
    --        for (i = 1, #lines)
    --            if (filter.PassFilter(lines[i])) then
    --                ImGui.BulletText(string.format("%s", lines[i]));
    --            end
    --    end
end

local function InputsNavigationFocus()
    -- TODOã€€input
    --    if (ImGui.CollapsingHeader("Inputs, Navigation & Focus"))then
    --        ImGuiIO& io = ImGui.GetIO();
    --
    --        -- Display ImGuiIO output flags
    --        ImGui.Text("WantCaptureMouse: %d", io.WantCaptureMouse);
    --        ImGui.Text("WantCaptureMouseUnlessPopupClose: %d", io.WantCaptureMouseUnlessPopupClose);
    --        ImGui.Text("WantCaptureKeyboard: %d", io.WantCaptureKeyboard);
    --        ImGui.Text("WantTextInput: %d", io.WantTextInput);
    --        ImGui.Text("WantSetMousePos: %d", io.WantSetMousePos);
    --        ImGui.Text("NavActive: %d, NavVisible: %d", io.NavActive, io.NavVisible);
    --
    --        -- Display Mouse state
    --        if (ImGui.TreeNode("Mouse State"))then
    --            if (ImGui.IsMousePosValid())
    --                ImGui.Text("Mouse pos: (%g, %g)", io.MousePos.x, io.MousePos.y);
    --            else
    --                ImGui.Text("Mouse pos: <INVALID>");
    --            ImGui.Text("Mouse delta: (%g, %g)", io.MouseDelta.x, io.MouseDelta.y);
    --            ImGui.Text("Mouse down:");     for (int i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (ImGui.IsMouseDown(i))         then ImGui.SameLine(); ImGui.Text("b%d (%.02f secs)", i, io.MouseDownDuration[i]); end
    --            ImGui.Text("Mouse clicked:");  for (int i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (ImGui.IsMouseClicked(i))      then ImGui.SameLine(); ImGui.Text("b%d", i); end
    --            ImGui.Text("Mouse dblclick:"); for (int i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (ImGui.IsMouseDoubleClicked(i))do ImGui.SameLine(); ImGui.Text("b%d", i); end
    --            ImGui.Text("Mouse released:"); for (int i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (ImGui.IsMouseReleased(i))     then ImGui.SameLine(); ImGui.Text("b%d", i); end
    --            ImGui.Text("Mouse wheel: %.1f", io.MouseWheel);
    --            ImGui.Text("Pen Pressure: %.1f", io.PenPressure); -- Note: currently unused
    --            ImGui.TreePop();
    --        end
    --
    --        -- Display Keyboard/Mouse state
    --        if (ImGui.TreeNode("Keyboard & Navigation State"))then
    --            ImGui.Text("Keys down:");          for (int i = 0; i < IM_ARRAYSIZE(io.KeysDown); i++) if (ImGui.IsKeyDown(i))        then ImGui.SameLine(); ImGui.Text("%d (0x%X) (%.02f secs)", i, i, io.KeysDownDuration[i]); end
    --            ImGui.Text("Keys pressed:");       for (int i = 0; i < IM_ARRAYSIZE(io.KeysDown); i++) if (ImGui.IsKeyPressed(i))     then ImGui.SameLine(); ImGui.Text("%d (0x%X)", i, i); end
    --            ImGui.Text("Keys release:");       for (int i = 0; i < IM_ARRAYSIZE(io.KeysDown); i++) if (ImGui.IsKeyReleased(i))    then ImGui.SameLine(); ImGui.Text("%d (0x%X)", i, i); end
    --            ImGui.Text("Keys mods: %s%s%s%s", io.KeyCtrl ? "CTRL " : "", io.KeyShift ? "SHIFT " : "", io.KeyAlt ? "ALT " : "", io.KeySuper ? "SUPER " : "");
    --            ImGui.Text("Chars queue:");        for (int i = 0; i < io.InputQueueCharacters.Size; i++) do ImWchar c = io.InputQueueCharacters[i]; ImGui.SameLine();  ImGui.Text("\'%c\' (0x%04X)", (c > ' ' and c <= 255) ? (char)c : '?', c); end -- FIXME: We should convert 'c' to UTF-8 here but the functions are not public.
    --
    --            ImGui.Text("NavInputs down:");     for (int i = 0; i < IM_ARRAYSIZE(io.NavInputs); i++) if (io.NavInputs[i] > 0.0)              then ImGui.SameLine(); ImGui.Text("[%d] %.2f (%.02f secs)", i, io.NavInputs[i], io.NavInputsDownDuration[i]); end
    --            ImGui.Text("NavInputs pressed:");  for (int i = 0; i < IM_ARRAYSIZE(io.NavInputs); i++) if (io.NavInputsDownDuration[i] == 0.0) do ImGui.SameLine(); ImGui.Text("[%d]", i); end
    --
    --            ImGui.Button("Hovering me sets the\nkeyboard capture flag");
    --            if (ImGui.IsItemHovered())
    --                ImGui.CaptureKeyboardFromApp(true);
    --            ImGui.SameLine();
    --            ImGui.Button("Holding me clears the\nthe keyboard capture flag");
    --            if (ImGui.IsItemActive())
    --                ImGui.CaptureKeyboardFromApp(false);
    --            ImGui.TreePop();
    --        end
    --
    --        if (ImGui.TreeNode("Tabbing"))then
    --            ImGui.Text("Use TAB/SHIFT+TAB to cycle through keyboard editable fields.");
    --            static char buf[32] = "hello";
    --            ImGui.InputText("1", buf, IM_ARRAYSIZE(buf));
    --            ImGui.InputText("2", buf, IM_ARRAYSIZE(buf));
    --            ImGui.InputText("3", buf, IM_ARRAYSIZE(buf));
    --            ImGui.PushAllowKeyboardFocus(false);
    --            ImGui.InputText("4 (tab skip)", buf, IM_ARRAYSIZE(buf));
    --            ImGui.SameLine(); HelpMarker("Item won't be cycled through when using TAB or Shift+Tab.");
    --            ImGui.PopAllowKeyboardFocus();
    --            ImGui.InputText("5", buf, IM_ARRAYSIZE(buf));
    --            ImGui.TreePop();
    --        end
    --
    --        if (ImGui.TreeNode("Focus from code"))then
    --            bool focus_1 = ImGui.Button("Focus on 1"); ImGui.SameLine();
    --            bool focus_2 = ImGui.Button("Focus on 2"); ImGui.SameLine();
    --            bool focus_3 = ImGui.Button("Focus on 3");
    --            int has_focus = 0;
    --            static char buf[128] = "click on a button to set focus";
    --
    --            if (focus_1) ImGui.SetKeyboardFocusHere();
    --            ImGui.InputText("1", buf, IM_ARRAYSIZE(buf));
    --            if (ImGui.IsItemActive()) has_focus = 1;
    --
    --            if (focus_2) ImGui.SetKeyboardFocusHere();
    --            ImGui.InputText("2", buf, IM_ARRAYSIZE(buf));
    --            if (ImGui.IsItemActive()) has_focus = 2;
    --
    --            ImGui.PushAllowKeyboardFocus(false);
    --            if (focus_3) ImGui.SetKeyboardFocusHere();
    --            ImGui.InputText("3 (tab skip)", buf, IM_ARRAYSIZE(buf));
    --            if (ImGui.IsItemActive()) has_focus = 3;
    --            ImGui.SameLine(); HelpMarker("Item won't be cycled through when using TAB or Shift+Tab.");
    --            ImGui.PopAllowKeyboardFocus();
    --
    --            if (has_focus)
    --                ImGui.Text("Item with focus: %d", has_focus);
    --            else
    --                ImGui.Text("Item with focus: <none>");
    --
    --            -- Use >= 0 parameter to SetKeyboardFocusHere() to focus an upcoming item
    --            static float f3[3] = do 0.0, 0.0, 0.0 end;
    --            int focus_ahead = -1;
    --            if (ImGui.Button("Focus on X")) do focus_ahead = 0; end ImGui.SameLine();
    --            if (ImGui.Button("Focus on Y")) do focus_ahead = 1; end ImGui.SameLine();
    --            if (ImGui.Button("Focus on Z")) do focus_ahead = 2; end
    --            if (focus_ahead ~= -1) ImGui.SetKeyboardFocusHere(focus_ahead);
    --            ImGui.SliderFloat3("Float3", f3[0], 0.0, 1.0);
    --
    --            ImGui.TextWrapped("NB: Cursor & selection are preserved when refocusing last used item in code.");
    --            ImGui.TreePop();
    --        end
    --
    --        if (ImGui.TreeNode("Dragging"))then
    --            ImGui.TextWrapped("You can use ImGui.GetMouseDragDelta(0) to query for the dragged amount on any widget.");
    --            for (int button = 0; button < 3; button++)then
    --                ImGui.Text("IsMouseDragging(%d):", button);
    --                ImGui.Text("  w/ default threshold: %d,", ImGui.IsMouseDragging(button));
    --                ImGui.Text("  w/ zero threshold: %d,", ImGui.IsMouseDragging(button, 0.0));
    --                ImGui.Text("  w/ large threshold: %d,", ImGui.IsMouseDragging(button, 20.0));
    --            end
    --
    --            ImGui.Button("Drag Me");
    --            if (ImGui.IsItemActive())
    --                ImGui.GetForegroundDrawList()->AddLine(io.MouseClickedPos[0], io.MousePos, ImGui.GetColorU32(ImGuiCol_Button), 4.0); -- Draw a line between the button and the mouse cursor
    --
    --            -- Drag operations gets "unlocked" when the mouse has moved past a certain threshold
    --            -- (the default threshold is stored in io.MouseDragThreshold). You can request a lower or higher
    --            -- threshold using the second parameter of IsMouseDragging() and GetMouseDragDelta().
    --            ImVec2 value_raw = ImGui.GetMouseDragDelta(0, 0.0);
    --            ImVec2 value_with_lock_threshold = ImGui.GetMouseDragDelta(0);
    --            ImVec2 mouse_delta = io.MouseDelta;
    --            ImGui.Text("GetMouseDragDelta(0):");
    --            ImGui.Text("  w/ default threshold: (%.1f, %.1f)", value_with_lock_threshold.x, value_with_lock_threshold.y);
    --            ImGui.Text("  w/ zero threshold: (%.1f, %.1f)", value_raw.x, value_raw.y);
    --            ImGui.Text("io.MouseDelta: (%.1f, %.1f)", mouse_delta.x, mouse_delta.y);
    --            ImGui.TreePop();
    --        end
    --
    --        if (ImGui.TreeNode("Mouse cursors"))then
    --            const char* mouse_cursors_names[] = do "Arrow", "TextInput", "ResizeAll", "ResizeNS", "ResizeEW", "ResizeNESW", "ResizeNWSE", "Hand", "NotAllowed" end;
    --            IM_ASSERT(IM_ARRAYSIZE(mouse_cursors_names) == ImGuiMouseCursor_COUNT);
    --
    --            ImGuiMouseCursor current = ImGui.GetMouseCursor();
    --            ImGui.Text("Current mouse cursor = %d: %s", current, mouse_cursors_names[current]);
    --            ImGui.Text("Hover to see mouse cursors:");
    --            ImGui.SameLine(); HelpMarker(
    --                "Your application can render a different mouse cursor based on what ImGui.GetMouseCursor() returns. "
    --                "If software cursor rendering (io.MouseDrawCursor) is set ImGui will draw the right cursor for you, "
    --                "otherwise your backend needs to handle it.");
    --            for (int i = 0; i < ImGuiMouseCursor_COUNT; i++)then
    --                char label[32];
    --                sprintf(label, "Mouse cursor %d: %s", i, mouse_cursors_names[i]);
    --                ImGui.Bullet(); ImGui.Selectable(label, false);
    --                if (ImGui.IsItemHovered())
    --                    ImGui.SetMouseCursor(i);
    --            end
    --            ImGui.TreePop();
    --        end
    --    end
end

function ImGui.ShowDemoWindowMisc()
    Filtering()
    InputsNavigationFocus()
end